@page "/task-step-view/{TaskId:int}"
@using OverblikPlus.Dtos
@using OverblikPlus.Dtos.TaskSteps
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Opgave Trin - Trin @currentStep?.StepNumber</h3>

@if (TaskSteps == null || !TaskSteps.Any())
{
<p>Ingen trin fundet for denne opgave.</p>
}
else if (currentStep == null)
{
<p>Indlæser trin...</p>
}
else
{
<div>
    <img src="@currentStep.Image" alt="Trin billede" width="300" style="display: block; margin: auto;" />
    <p style="text-align: center;">@currentStep.Text</p>

    @if (currentStep.RequiresQrCodeScan)
    {
    <button @onclick="StartScanning">Scan QR-kode for at fortsætte</button>
    <video id="video" width="300" height="200" autoplay style="display: @(isScanning ? "block" : "none");"></video>
    }
    else
    {
    <button @onclick="ShowNextStep">Næste trin</button>
    }
</div>
}

@code {
[Parameter] public int TaskId { get; set; }

private List<TaskStepDto> TaskSteps = new();
private TaskStepDto? currentStep;
private int currentStepIndex = 0;
private bool isScanning = false;

protected override async Task OnInitializedAsync()
{
await LoadTaskSteps();


if (TaskSteps.Any())
{
currentStep = TaskSteps[currentStepIndex];
}
}

private async Task LoadTaskSteps()
{
var response = await Http.GetFromJsonAsync<List<TaskStepDto>>($"/api/tasks/{TaskId}/steps");
TaskSteps = response ?? new List<TaskStepDto>();


if (!TaskSteps.Any())
{
Console.WriteLine($"Ingen trin fundet for task med ID: {TaskId}");
}
}

private async Task ShowNextStep()
{
if (currentStepIndex < TaskSteps.Count - 1)
{
currentStepIndex++;
currentStep = TaskSteps[currentStepIndex];


if (currentStep.RequiresQrCodeScan)
{
await StartScanning();
}
}
else
{

Navigation.NavigateTo("/task-complete");
}
}

private async Task StartScanning()
{
if (!isScanning)
{
isScanning = true;
await JS.InvokeVoidAsync("startScanning");
}
}

[JSInvokable]
public async Task OnQrCodeScanned(string result)
{

await StopScanning();
await ShowNextStep();
}

private async Task StopScanning()
{
await JS.InvokeVoidAsync("stopScanning");
isScanning = false;
}
}
