@page "/task-step-view/{TaskId:int}"
@using OverblikPlus.Dtos.TaskSteps
@using OverblikPlus.Services.Interfaces
@inject ITaskStepService TaskStepService
@inject NavigationManager Navigation
@inject IJSRuntime Js


<h3>Opgave Trin - Trin @(currentStepIndex + 1) af @TaskSteps.Count</h3>

@if (TaskSteps == null || !TaskSteps.Any())
{
    <p>Ingen trin fundet for denne opgave.</p>
}
else if (currentStep == null)
{
    <p>Indlæser trin...</p>
}
else
{
    <div class="text-center">
        @if (!string.IsNullOrEmpty(currentStep.Image))
        {
            <img src="@currentStep.Image" alt="Trin billede" width="300" class="mb-3" />
        }

        <p>@currentStep.Text</p>

        @if (currentStep.RequiresQrCodeScan)
        {
            <button class="btn btn-secondary" @onclick="StartScanning">Scan QR-kode for at fortsætte</button>
            <video id="video" width="300" height="200" autoplay style="display: @(isScanning ? "block" : "none");"></video>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ShowNextStep">Næste trin</button>
        }
    </div>
}

@code {
    [Parameter] public int TaskId { get; set; }

    private List<ReadTaskStepDto> TaskSteps { get; set; } = new();
    private ReadTaskStepDto? currentStep;
    private int currentStepIndex = 0;
    private bool isScanning = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTaskSteps();

        if (TaskSteps.Any())
        {
            currentStep = TaskSteps[currentStepIndex];
        }
    }

    private async Task LoadTaskSteps()
    {
        try
        {
            Console.WriteLine("Kalder GetStepsForTask for TaskId: " + TaskId);
            TaskSteps = await TaskStepService.GetStepsForTask(TaskId) ?? new List<ReadTaskStepDto>();

            Console.WriteLine("Antal trin hentet: " + TaskSteps.Count);

            if (TaskSteps.Any())
            {
                currentStep = TaskSteps[currentStepIndex];
                Console.WriteLine("Indlæser første trin:");
                Console.WriteLine("Tekst: " + currentStep.Text);
                Console.WriteLine("Image URL: " + currentStep.Image);
            }
            else
            {
                Console.WriteLine($"Ingen trin fundet for task med ID: {TaskId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved hentning af trin: {ex.Message}");
        }
    }

    private async Task ShowNextStep()
    {
        if (currentStepIndex < TaskSteps.Count - 1)
        {
            currentStepIndex++;
            currentStep = TaskSteps[currentStepIndex];

            if (currentStep.RequiresQrCodeScan)
            {
                await StartScanning();
            }
        }
        else
        {
            Navigation.NavigateTo("/task-complete");
        }
    }

    private async Task StartScanning()
    {
        if (!isScanning)
        {
            isScanning = true;
            await Js.InvokeVoidAsync("startScanning");
        }
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string result)
    {
        await StopScanning();
        await ShowNextStep();
    }

    private async Task StopScanning()
    {
        await Js.InvokeVoidAsync("stopScanning");
        isScanning = false;
    }
}
