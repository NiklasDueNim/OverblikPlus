@page "/task-step-view/{TaskId:int}/step/{StepId:int}"
@using OverblikPlus.Dtos.TaskSteps
@using OverblikPlus.Services.Interfaces
@inject ITaskStepService TaskStepService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<h3>Opgave Trin - Trin @currentStep?.StepNumber</h3>

@if (currentStep == null)
{
    <p>Indlæser trin...</p>
}
else
{
    <div class="text-center">
        @if (!string.IsNullOrEmpty(currentStep.Image))
        {
            <img src="@currentStep.Image" alt="Trin billede" width="300" class="mb-3" />
        }
        <p>@currentStep.Text</p>

        @if (currentStep.RequiresQrCodeScan)
        {
            <button class="btn btn-secondary" @onclick="StartScanning">Scan QR-kode for at fortsætte</button>
            <div id="qr-scanner" style="display: @(isScanning ? "block" : "none");">
                <video id="video" style="width: 100%; height: auto;"></video>
                <button @onclick="StopScanning">Annuller</button>
            </div>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ShowNextStep">Næste trin</button>
        }
    </div>
    <div>
        <button @onclick="TestClick">Test Console Output</button>
    </div>
}

@code {
    [Parameter] public int TaskId { get; set; }
    [Parameter] public int StepId { get; set; }

    private List<ReadTaskStepDto> TaskSteps { get; set; } = new List<ReadTaskStepDto>();
    private ReadTaskStepDto? currentStep;
    private bool isScanning = false;

    protected override async Task OnInitializedAsync()
    {
        TaskSteps = await TaskStepService.GetStepsForTask(TaskId);
        await LoadCurrentStep();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCurrentStep();
    }

    private async Task LoadCurrentStep()
    {
        TaskSteps = await TaskStepService.GetStepsForTask(TaskId);
        for (int i = 0; i < TaskSteps.Count; i++)
        {
            TaskSteps[i].StepNumber = i + 1;  // Setting StepNumber based on index
        }
        currentStep = TaskSteps.FirstOrDefault(step => step.Id == StepId);
        if (currentStep == null)
        {
            Console.WriteLine($"Step with ID {StepId} not found for Task {TaskId}.");
            Navigation.NavigateTo("/tasks");
        }
        else
        {
            Console.WriteLine($"Loaded Step: ID = {currentStep.Id}, StepNumber = {currentStep.StepNumber}");
        }
    }


    private void ShowNextStep()
    {
        Console.WriteLine("Bliver dette kaldt?");
        var currentIndex = TaskSteps.FindIndex(step => step.Id == StepId);
        if (currentIndex != -1 && currentIndex < TaskSteps.Count - 1)
        {
            var nextStepId = TaskSteps[currentIndex + 1].Id;
            Navigation.NavigateTo($"/task-step-view/{TaskId}/step/{nextStepId}");
        }
        else
        {
            Console.WriteLine("No more steps. Returning to task list.");
            Navigation.NavigateTo("/tasks");
        }
    }

    public async Task StartScanning()
    {
        if (!isScanning)
        {
            isScanning = true;
            await Js.InvokeVoidAsync("startScanning");
        }
    }

    public async Task StopScanning()
    {
        await Js.InvokeVoidAsync("stopScanning");
        isScanning = false;
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string result)
    {
        await StopScanning();
        ShowNextStep();
    }
    
    private void TestClick()
    {
        Console.WriteLine("TestClick button clicked");
    }
}
