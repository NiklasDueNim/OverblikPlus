@page "/task-step-view/{TaskId:int}"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Opgave Trin - Trin @currentStep?.StepNumber</h3>

@if (currentStep == null)
{
    <p>Indlæser trin...</p>
}
else
{
    <div>
        <img src="@currentStep.Image" alt="Trin billede" width="300" style="display: block; margin: auto;" />
        <p style="text-align: center;">@currentStep.Text</p>
        
        @if (currentStep.RequiresQrCodeScan)
        {
            <button @onclick="StartScanning">Scan QR-kode for at fortsætte</button>
            <video id="video" width="300" height="200" autoplay style="display: @(isScanning ? "block" : "none");"></video>
        }
        else
        {
            <button @onclick="ShowNextStep">Næste trin</button>
        }
    </div>
}

@code {
    [Parameter] public int TaskId { get; set; }

    private List<TaskStepDto> TaskSteps = new();
    private TaskStepDto? currentStep;
    private int currentStepIndex = 0;
    private bool isScanning = false;

    protected override async Task OnInitializedAsync()
    {
        // Hent alle trin for opgaven ved start
        await LoadTaskSteps();
        currentStep = TaskSteps.FirstOrDefault();
    }

    private async Task LoadTaskSteps()
    {
        var response = await Http.GetFromJsonAsync<List<TaskStepDto>>($"/api/tasks/{TaskId}/steps");
        TaskSteps = response ?? new List<TaskStepDto>();
    }

    private async Task ShowNextStep()
    {
        if (currentStepIndex < TaskSteps.Count - 1)
        {
            currentStepIndex++;
            currentStep = TaskSteps[currentStepIndex];

            // Hvis næste trin kræver QR-kode, start scanning
            if (currentStep.RequiresQrCodeScan)
            {
                await StartScanning();
            }
        }
        else
        {
            // Naviger til slutningen eller fuldført side
            Navigation.NavigateTo("/task-complete");
        }
    }

    private async Task StartScanning()
    {
        if (!isScanning)
        {
            isScanning = true;
            await JS.InvokeVoidAsync("startScanning");
        }
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string result)
    {
        // Stop scanning og vis næste trin
        await StopScanning();
        await ShowNextStep();
    }

    private async Task StopScanning()
    {
        await JS.InvokeVoidAsync("stopScanning");
        isScanning = false;
    }
}
