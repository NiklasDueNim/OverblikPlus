@page "/task-step-view/{TaskId:int}/step/{StepId:int}"
@using OverblikPlus.Dtos.TaskSteps
@using OverblikPlus.Services.Interfaces
@inject ITaskStepService TaskStepService
@inject NavigationManager Navigation
@inject IJSRuntime Js

<h3>Opgave Trin - Trin @currentStep?.StepNumber</h3>

@if (currentStep == null)
{
    <p>Indlæser trin...</p>
}
else
{
    <div class="text-center">
        @if (!string.IsNullOrEmpty(currentStep.Image))
        {
            <img src="@currentStep.Image" alt="Trin billede" width="300" class="mb-3" />
        }
        <p>@currentStep.Text</p>

        @if (currentStep.RequiresQrCodeScan)
        {
            <button class="btn btn-secondary" @onclick="StartScanning">Scan QR-kode for at fortsætte</button>
            <div id="qr-scanner" style="display: @(isScanning ? "block" : "none");">
                <video id="video" style="width: 100%; height: auto;"></video>
                <button @onclick="StopScanning">Annuller</button>
            </div>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ShowNextStep">Næste trin</button>
        }
    </div>
}

@code {
    [Parameter] public int TaskId { get; set; }
    [Parameter] public int StepId { get; set; }

    private ReadTaskStepDto? currentStep;
    private bool isScanning = false;

    protected override async Task OnParametersSetAsync()
    {
        await LoadCurrentStep();
    }

    private async Task LoadCurrentStep()
    {
        try
        {
            Console.WriteLine($"Loading step with TaskId: {TaskId} and StepId: {StepId}");
            currentStep = await TaskStepService.GetTaskStep(TaskId, StepId);

            if (currentStep == null)
            {
                Console.WriteLine($"Step with StepId {StepId} not found for TaskId {TaskId}.");
                Navigation.NavigateTo("/tasks");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading step: {ex.Message}");
        }
    }

    private void ShowNextStep()
    {
        if (currentStep?.NextStepId != null)
        {
            Navigation.NavigateTo($"/task-step-view/{TaskId}/step/{currentStep.NextStepId}");
        }
        else
        {
            Console.WriteLine("No more steps. Returning to task list.");
            Navigation.NavigateTo("/tasks");
        }
    }

    public async Task StartScanning()
    {
        if (!isScanning)
        {
            isScanning = true;
            await Js.InvokeVoidAsync("startScanning");
        }
    }

    public async Task StopScanning()
    {
        await Js.InvokeVoidAsync("stopScanning");
        isScanning = false;
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string result)
    {
        await StopScanning();
        ShowNextStep();
    }
}
