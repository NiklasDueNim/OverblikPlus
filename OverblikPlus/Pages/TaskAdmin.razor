@page "/admin/tasks"
@using AutoMapper
@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Dtos.TaskSteps
@using OverblikPlus.Dtos.User
@using OverblikPlus.Services.Interfaces
@using OverblikPlus.Components
@inject ITaskService TaskService
@inject IUserService UserService
@inject ITaskStepService TaskStepService
@inject IMapper Mapper

<div class="container mt-4">
    <h3 class="mb-4">Administrer Opgaver</h3>

    @if (isTaskFormVisible)
    {
        <TaskForm Title="@(isEditMode ? "Rediger Opgave" : "Opret Ny Opgave")" 
                  Task="currentTask" 
                  Users="users" 
                  OnSave="SaveTask" 
                  OnCancel="CancelTaskForm" />
    }

    <hr />

    <TaskOverviewComponent Tasks="Tasks" 
                           OnEditTask="EditTask" 
                           OnDeleteTask="DeleteTask" 
                           OnAddStep="AddStep" 
                           OnEditStep="EditStep" 
                           OnDeleteStep="OnDeleteStepHandler" />

    @if (isStepFormVisible)
    {
        <TaskStepForm Step="currentStep" OnSave="SaveStep" OnCancel="CancelStepForm" />
    }
</div>

@code {
    private List<ReadTaskDto> Tasks { get; set; } = new List<ReadTaskDto>();
    private List<ReadUserDto> users = new List<ReadUserDto>();
    private CreateTaskDto newTask = new CreateTaskDto();
    private UpdateTaskDto currentTask = new UpdateTaskDto();
    private bool isEditMode = false;
    private bool isTaskFormVisible = false;
    private bool isStepFormVisible = false;
    private UpdateTaskStepDto currentStep = new UpdateTaskStepDto(); 
    private bool isEditStepMode = false;
    private List<ReadTaskStepDto> stepsForCurrentTask = new List<ReadTaskStepDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
        await LoadUsers();
    }

    private async Task LoadTasks()
    {
        Tasks = await TaskService.GetAllTasks();
    }

    private async Task LoadUsers()
    { 
        users = (await UserService.GetAllUsers()).ToList();
    }

    private void EditTask(ReadTaskDto task)
    {
        currentTask = Mapper.Map<UpdateTaskDto>(task);
        isEditMode = true;
        isTaskFormVisible = true;
    }

    private async Task SaveTask()
    {
        if (isEditMode)
        {
            await TaskService.UpdateTask(currentTask.Id, currentTask);
        }
        else
        {
            var newTaskDto = new CreateTaskDto 
            {
                Name = currentTask.Name,
                Description = currentTask.Description,
                ImageBase64 = currentTask.ImageBase64,
                UserId = currentTask.UserId ?? 0
            };

            await TaskService.CreateTask(newTaskDto);
        }
    
        await LoadTasks();
        isTaskFormVisible = false;
        ResetForm();
    }


    private void ResetForm()
    {
        currentTask = new UpdateTaskDto();
        isEditMode = false;
    }

    private void CancelTaskForm()
    {
        isTaskFormVisible = false;
        ResetForm();
    }

    private async Task DeleteTask(int taskId)
    {
        await TaskService.DeleteTask(taskId);
        await LoadTasks();
    }

    private void AddStep(int taskId)
    {
        currentStep = new UpdateTaskStepDto { TaskId = taskId };
        isStepFormVisible = true;
        isEditStepMode = false;
    }

    private async Task SaveStep()
    {
        if (isEditStepMode)
        {
            await TaskStepService.UpdateTaskStep(currentStep.TaskId, currentStep.Id, currentStep);
        }
        else
        {
            var createStepDto = new CreateTaskStepDto
            {
                TaskId = currentStep.TaskId,
                Text = currentStep.Text,
                RequiresQrCodeScan = currentStep.RequiresQrCodeScan
            };
        
            await TaskStepService.CreateTaskStep(createStepDto);
        }

        await UpdateTaskSteps(currentStep.TaskId);
        isStepFormVisible = false;
        ResetStepForm();
    }
    
    private async Task LoadTaskSteps(int taskId)
    {
        stepsForCurrentTask = await TaskStepService.GetStepsForTask(taskId);
        StateHasChanged();
    }
    
    private async Task UpdateTaskSteps(int taskId)
    {
        var updatedSteps = await TaskStepService.GetStepsForTask(taskId);
        var task = Tasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.Steps = updatedSteps;
            StateHasChanged();
        }
    }



    private void EditStep(ReadTaskStepDto step)
    {
        currentStep = Mapper.Map<UpdateTaskStepDto>(step);
        currentStep.TaskId = step.TaskId;
        isEditStepMode = true;
        isStepFormVisible = true;
    }

    private void ResetStepForm()
    {
        currentStep = new UpdateTaskStepDto();
        isEditStepMode = false;
    }

    private void CancelStepForm()
    {
        isStepFormVisible = false;
        ResetStepForm();
    }

    private async Task DeleteStep(int taskId, int stepId)
    {
        await TaskStepService.DeleteTaskStep(taskId, stepId);
        await UpdateTaskSteps(taskId);
    }
    
    private Task OnDeleteStepHandler(int stepId)
    {
        var task = Tasks.FirstOrDefault(t => t.Steps.Any(s => s.Id == stepId));
        if (task != null)
        {
            int taskId = task.Id;
            return DeleteStep(taskId, stepId);
        }
        else
        {
            Console.WriteLine("Kunne ikke finde opgaven for det givne trin");
            return Task.CompletedTask;
        }
    }
}
