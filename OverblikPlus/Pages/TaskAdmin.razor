@page "/admin/tasks"
@inject HttpClient Http

<h3>Administrer Opgaver</h3>

<!-- Formular til oprettelse/ændring af en task -->
<div>
    <h4>@(isEditMode ? "Rediger Opgave" : "Opret Ny Opgave")</h4>
    <label>Navn:</label>
    <input @bind="currentTask.Name" />
    <br />
    <label>Beskrivelse:</label>
    <textarea @bind="currentTask.Description"></textarea>
    <br />
    <label>Billede:</label>
    <input type="file" @onchange="HandleImageUpload" />
    <br />
    <button @onclick="SaveTask">@((isEditMode) ? "Opdater Opgave" : "Opret Opgave")</button>
    <button @onclick="CancelEdit" style="display:@(isEditMode ? "inline-block" : "none")">Annuller</button>
</div>

<hr />

<!-- Liste over opgaver -->
<ul>
    @foreach (var task in Tasks)
    {
        <li>
            <h4>@task.Name</h4>
            <p>@task.Description</p>
            <img src="@task.Image" alt="Opgave Billede" style="width:100px; height:100px;" />
            <button @onclick="() => EditTask(task)">Rediger</button>
            <button @onclick="() => DeleteTask(task.Id)">Slet</button>

            <h5>Trin:</h5>
            <ul>
                @foreach (var step in task.Steps)
                {
                    <li>
                        <p>@step.Text</p>
                        <img src="@step.Image" alt="Trin Billede" style="width:100px; height:100px;" />
                        <button @onclick="() => EditStep(step)">Rediger Trin</button>
                        <button @onclick="() => DeleteStep(step.Id)">Slet Trin</button>
                    </li>
                }
            </ul>
            <button @onclick="() => AddStep(task.Id)">Tilføj Trin</button>
        </li>
    }
</ul>

@code {
    private List<ReadTaskDto> Tasks { get; set; } = new List<ReadTaskDto>();
    private CreateTaskDto currentTask = new CreateTaskDto();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        Tasks = await Http.GetFromJsonAsync<List<ReadTaskDto>>("/api/Task");
    }

    private async Task SaveTask()
    {
        if (isEditMode)
        {
            await Http.PutAsJsonAsync($"/api/Task/{currentTask.Id}", currentTask);
        }
        else
        {
            await Http.PostAsJsonAsync("/api/Task", currentTask);
        }

        currentTask = new CreateTaskDto();
        isEditMode = false;
        await LoadTasks();
    }

    private void EditTask(ReadTaskDto task)
    {
        currentTask = new CreateTaskDto
        {
            Id = task.Id,
            Name = task.Name,
            Description = task.Description,
            ImageBase64 = task.Image
        };
        isEditMode = true;
    }

    private async Task DeleteTask(int taskId)
    {
        await Http.DeleteAsync($"/api/Task/{taskId}");
        await LoadTasks();
    }

    private async Task HandleImageUpload(ChangeEventArgs e)
    {
        if (e.Value is IBrowserFile file)
        {
            using var stream = file.OpenReadStream();
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer);
            currentTask.ImageBase64 = Convert.ToBase64String(buffer);
            //currentTask.ImageBase64 = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
            Console.WriteLine("Billedet er blevet konverteret til base64"); // Debugging
        }
    }

    private void CancelEdit()
    {
        currentTask = new CreateTaskDto();
        isEditMode = false;
    }

    private async Task AddStep(int taskId)
    {
        // Logik til tilføjelse af trin for en opgave, fx via et modal
    }

    private void EditStep(TaskStepDto step)
    {
        // Logik til redigering af et trin
    }

    private async Task DeleteStep(int stepId)
    {
        // Logik til sletning af et trin
    }
}
