@page "/admin/tasks"
@using OverblikPlus.Dtos
@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Dtos.TaskSteps
@using OverblikPlus.Dtos.User
@using OverblikPlus.Services.Interfaces
@inject HttpClient Http
@inject IUserService UserService
@inject ITaskService TaskService
@inject NavigationManager Navigation

<div class="container mt-4">
    <h3 class="mb-4">Administrer Opgaver</h3>

    <!-- Formular til oprettelse/ændring af en task -->
    <div class="card mb-4">
        <div class="card-header">
            <h4 class="card-title">@(isEditMode ? "Rediger Opgave" : "Opret Ny Opgave")</h4>
        </div>
        <div class="card-body">
            <form>
                <div class="mb-3">
                    <label for="taskName" class="form-label">Navn:</label>
                    <input id="taskName" @bind="currentTask.Name" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="taskDescription" class="form-label">Beskrivelse:</label>
                    <textarea id="taskDescription" @bind="currentTask.Description" class="form-control"></textarea>
                </div>
                <div class="mb-3">
                    <label for="taskImage" class="form-label">Billede:</label>
                    <InputFile OnChange="HandleImageUpload" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="user" class="form-label">Tildel opgave til en bruger</label>
                    <select id="user" @bind="currentTask.UserId" class="form-select">
                        <option value="">Vælg bruger</option>
                        @if (users != null && users.Any())
                        {
                        @foreach (var user in users)
                        {
                        <option value="@user.Id">@user.FirstName @user.LastName</option>
                        }
                        }
                        else
                        {
                        <option>No users available. Please try again later.</option>
                        }
                    </select>
                </div>
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-primary me-2" @onclick="SaveTask">@((isEditMode) ? "Opdater Opgave" : "Opret Opgave")</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Annuller</button>
                </div>
            </form>
        </div>
    </div>

    <hr />

    <!-- Liste over opgaver -->
    <div class="task-list mb-4">
        <h4>Liste over Opgaver</h4>
        <ul class="list-group">
            @foreach (var task in Tasks)
            {
            <li class="list-group-item mb-2">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5>@task.Name</h5>
                        <p>@task.Description</p>
                        @if (!string.IsNullOrEmpty(task.Image))
                        {
                        <img src="@task.Image" alt="Opgave Billede" class="img-thumbnail" style="width: 150px; height: auto;" />
                        }
                    </div>
                    <div>
                        <button class="btn btn-primary me-2" @onclick="() => EditTask(task)">Rediger</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Slet</button>
                    </div>
                </div>
                <div>
                    <h6>Trin:</h6>
                    <ul class="list-group">
                        @foreach (var step in task.Steps)
                        {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@step.Text</span>
                            @if (!string.IsNullOrEmpty(step.Image))
                            {
                            <img src="@step.Image" alt="Trin Billede" class="img-thumbnail" style="width: 100px; height: auto;" />
                            }
                            <div>
                                <button class="btn btn-secondary me-2" @onclick="() => EditStep(step)">Rediger Trin</button>
                                <button class="btn btn-danger" @onclick="() => DeleteStep(step.Id)">Slet Trin</button>
                            </div>
                        </li>
                        }
                    </ul>
                </div>
                <button class="btn btn-success mt-2" @onclick="() => AddStep(task.Id)">Tilføj Trin</button>
            </li>
            }
        </ul>
    </div>

    <!-- Formular til tilføjelse af trin -->
    @if (isAddingStep)
    {
    <div class="card mt-4">
        <div class="card-header">
            <h5>Tilføj et trin</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="stepText" class="form-label">Beskrivelse:</label>
                <textarea id="stepText" @bind="newStep.Text" class="form-control"></textarea>
            </div>
            <div class="mb-3">
                <label for="stepImage" class="form-label">Billede:</label>
                <InputFile OnChange="HandleStepImageUpload" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="requiresQrCode" class="form-label">Kræver QR-kode scanning:</label>
                <input type="checkbox" id="requiresQrCode" @bind="newStep.RequiresQrCodeScan" class="form-check-input" />
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-primary me-2" @onclick="SaveTaskStep">Tilføj Trin</button>
                <button class="btn btn-secondary" @onclick="CancelAddStep">Annuller</button>
            </div>
        </div>
    </div>
    }
</div>


@code {
    private List<ReadTaskDto> Tasks { get; set; } = new List<ReadTaskDto>();
    private CreateTaskDto currentTask = new CreateTaskDto();
    private bool isEditMode = false;
    private bool isAddingStep = false;
    private CreateTaskStepDto newStep = new CreateTaskStepDto();
    private int currentTaskIdForStep = 0;
    private List<ReadUserDto> users { get; set; } = new List<ReadUserDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
        await LoadUsers();
    }

    private async Task LoadTasks()
    {
        Tasks = await TaskService.GetAllTasks();
    }

    private async Task LoadUsers()
    {
        try
        {
            var result  = await UserService.GetAllUsers();
            users = result.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }


    private async Task SaveTask()
    {
        try
        {
            if (isEditMode)
            {
                var response = await Http.PutAsJsonAsync($"/api/Task/{currentTask.Id}", currentTask);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Task updated successfully");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error updating task: {response.ReasonPhrase}, Details: {errorContent}");
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync("/api/Task", currentTask);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Task created successfully");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error creating task: {response.ReasonPhrase}, Details: {errorContent}");
                }
            }

            currentTask = new CreateTaskDto();
            isEditMode = false;
            await LoadTasks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during task creation: {ex.Message}");
        }
    }
    

    private void EditTask(ReadTaskDto task)
    {
        currentTask = new CreateTaskDto
        {
            Id = task.Id,
            Name = task.Name,
            Description = task.Description,
            ImageBase64 = task.Image,
            RequiresQrCodeScan = task.RequiresQrCodeScan,
            UserId = task.UserId
        };
        isEditMode = true;
    }

    private async Task DeleteTask(int taskId)
    {
        await Http.DeleteAsync($"/api/Task/{taskId}");
        await LoadTasks();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.GetMultipleFiles(1).FirstOrDefault();
            if (file != null)
            {
                using var stream = file.OpenReadStream(1024 * 1024 * 10);
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                currentTask.ImageBase64 = Convert.ToBase64String(buffer);
            }
        }
    }

    private void AddStep(int taskId)
    {
        currentTaskIdForStep = taskId;
        newStep = new CreateTaskStepDto { TaskId = taskId };
        isAddingStep = true;
    }

    private async Task SaveTaskStep()
    {
        newStep.TaskId = currentTaskIdForStep;
        
        await Http.PostAsJsonAsync($"/api/tasks/{currentTaskIdForStep}/steps", newStep);
        
        await LoadTaskSteps(currentTaskIdForStep);
        
        isAddingStep = false;
        newStep = new CreateTaskStepDto();
    }

    private void CancelAddStep()
    {
        isAddingStep = false;
        newStep = new CreateTaskStepDto();
    }

    private async Task HandleStepImageUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.GetMultipleFiles(1).FirstOrDefault();
            if (file != null)
            {
                using var stream = file.OpenReadStream(1024 * 1024 * 10);
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                newStep.ImageBase64 = Convert.ToBase64String(buffer);
            }
        }
    }

    private async Task LoadTaskSteps(int taskId)
    {
        var response = await Http.GetFromJsonAsync<List<TaskStepDto>>($"/api/tasks/{taskId}/steps");
        var task = Tasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.Steps = response ?? new List<TaskStepDto>();
            StateHasChanged();
        }
    }
    
    private void CancelEdit()
    {
        currentTask = new CreateTaskDto();
        isEditMode = false;
    }

    private void EditStep(TaskStepDto step)
    {
    }

    private async Task DeleteStep(int stepId)
    {
    }
}

