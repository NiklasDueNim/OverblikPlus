@page "/admin/tasks"
@using AutoMapper
@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Dtos.TaskSteps
@using OverblikPlus.Dtos.User
@using OverblikPlus.Services.Interfaces
@using OverblikPlus.Components
@inject ITaskService TaskService
@inject IUserService UserService
@inject ITaskStepService TaskStepService
@inject IMapper Mapper
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="container mt-4">
    <h3 class="mb-4">Administrer Opgaver</h3>

    <!-- Knap til at oprette en ny opgave -->
    <button class="btn btn-success mb-3" @onclick="CreateTask">Opret Ny Opgave</button>

    @if (isTaskFormVisible)
    {
        <TaskForm Title="@(isEditMode ? "Rediger Opgave" : "Opret Ny Opgave")" 
                  Task="taskFormModel" 
                  Users="users" 
                  OnSave="SaveTask" 
                  OnCancel="CancelTaskForm" />
    }

    <hr />

    <TaskOverviewComponent Tasks="Tasks" 
                           OnEditTask="EditTask" 
                           OnDeleteTask="DeleteTask" 
                           OnAddStep="AddStep" 
                           OnEditStep="EditStep" 
                           OnDeleteStep="OnDeleteStepHandler" />

    @if (isStepFormVisible)
    {
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-labelledby="addStepModalLabel" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditStepMode ? "Rediger Trin" : "Tilføj Trin"))</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelStepForm"></button>
                </div>
                <div class="modal-body">
                    <!-- Formular for trin -->
                    <div class="mb-3">
                        <label for="stepText" class="form-label">Beskrivelse:</label>
                        <textarea id="stepText" @bind="currentStep.Text" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="stepImage" class="form-label">Billede:</label>
                        <InputFile OnChange="HandleImageUpload" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="stepNumber" class="form-label">Trin Nummer:</label>
                        <input type="number" id="stepNumber" @bind="currentStep.StepNumber" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="requiresQrCode" class="form-label">Kræver QR-kode scanning:</label>
                        <input type="checkbox" id="requiresQrCode" @bind="currentStep.RequiresQrCodeScan" class="form-check-input" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelStepForm">Annuller</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveStep">Gem</button>
                </div>
            </div>
        </div>
    </div>
    }
</div>

@code {
    private List<ReadTaskDto> Tasks { get; set; } = new List<ReadTaskDto>();
    private List<ReadUserDto> users = new List<ReadUserDto>();
    private TaskFormModel taskFormModel = new TaskFormModel();
    private bool isEditMode = false;
    private bool isTaskFormVisible = false;
    private bool isStepFormVisible = false;
    private TaskStepFormModel currentStep = new TaskStepFormModel(); 
    private bool isEditStepMode = false;

    protected override async Task OnInitializedAsync()
    {
        var role = await AuthStateProvider.GetRoleAsync();
        if (role != "Admin" && role != "Staff")
        {
            Navigation.NavigateTo("/unauthorized");
            return;
        }

        await LoadTasks();
        await LoadUsers();
    }

    private async Task LoadTasks()
    {
        Tasks = await TaskService.GetAllTasks();
    }

    private async Task LoadUsers()
    { 
        users = (await UserService.GetAllUsers()).ToList();
    }

    private void CreateTask()
    {
        taskFormModel = new TaskFormModel();
        isEditMode = false;
        isTaskFormVisible = true;
    }

    private void EditTask(ReadTaskDto task)
    {
        taskFormModel = Mapper.Map<TaskFormModel>(task);
        isEditMode = true;
        isTaskFormVisible = true;
    }

    private async Task SaveTask()
    {
        try
        {
            if (isEditMode)
            {
                Console.WriteLine($"Opdaterer opgave med ID {taskFormModel.Id}");
                var updateTaskDto = Mapper.Map<UpdateTaskDto>(taskFormModel);
                await TaskService.UpdateTask(updateTaskDto.Id, updateTaskDto);
            }
            else
            {
                Console.WriteLine("Opretter ny opgave");
                var createTaskDto = Mapper.Map<CreateTaskDto>(taskFormModel);
                await TaskService.CreateTask(createTaskDto);
            }
        
            await LoadTasks();
            isTaskFormVisible = false;
            ResetForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl i SaveTask: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        taskFormModel = new TaskFormModel();
        isEditMode = false;
    }

    private void CancelTaskForm()
    {
        isTaskFormVisible = false;
        ResetForm();
    }

    private async Task DeleteTask(int taskId)
    {
        try
        {
            bool succes = await TaskService.DeleteTask(taskId);
            if (succes)
            {
                Console.WriteLine("Opgaven er slettet");
                await LoadTasks();
            }
            else
            {
                Console.WriteLine("Du har ikke tilladelse til at slette denne opgave");
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void AddStep(int taskId)
    {
        currentStep = new TaskStepFormModel { TaskId = taskId };
        isEditStepMode = false;
        isStepFormVisible = true;
    }

    private void EditStep(ReadTaskStepDto step)
    {
        currentStep = Mapper.Map<TaskStepFormModel>(step);
        isEditStepMode = true;
        isStepFormVisible = true;
    }

    private async Task SaveStep()
    {
        try
        {
            if (isEditStepMode)
            {
                Console.WriteLine($"Opdaterer trin ID {currentStep.Id} for opgave ID {currentStep.TaskId}");
                var updateStepDto = Mapper.Map<UpdateTaskStepDto>(currentStep);
                await TaskStepService.UpdateTaskStep(updateStepDto.TaskId, updateStepDto.Id, updateStepDto);
            }
            else
            {
                Console.WriteLine($"Opretter nyt trin for opgave ID {currentStep.TaskId}");
                var createStepDto = Mapper.Map<CreateTaskStepDto>(currentStep);
                await TaskStepService.CreateTaskStep(createStepDto);
            }

            await UpdateTaskSteps(currentStep.TaskId);
            isStepFormVisible = false;
            ResetStepForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl i SaveStep: {ex.Message}");
        }
    }

    private void ResetStepForm()
    {
        currentStep = new TaskStepFormModel();
        isEditStepMode = false;
    }

    private void CancelStepForm()
    {
        isStepFormVisible = false;
        ResetStepForm();
    }

    private async Task UpdateTaskSteps(int taskId)
    {
        var updatedSteps = await TaskStepService.GetStepsForTask(taskId);
        var index = Tasks.FindIndex(t => t.Id == taskId);
        if (index >= 0)
        {
            var task = Tasks[index];
            Tasks[index] = new ReadTaskDto
            {
                Id = task.Id,
                Name = task.Name,
                Description = task.Description,
                Image = task.Image,
                UserId = task.UserId,
                Steps = updatedSteps
            };
            StateHasChanged();
        }
    }

    private async Task DeleteStep(int taskId, int stepId)
    {
        await TaskStepService.DeleteTaskStep(taskId, stepId);
        await UpdateTaskSteps(taskId);
    }

    private Task OnDeleteStepHandler(int stepId)
    {
        var task = Tasks.FirstOrDefault(t => t.Steps.Any(s => s.Id == stepId));
        if (task != null)
        {
            int taskId = task.Id;
            return DeleteStep(taskId, stepId);
        }
        else
        {
            Console.WriteLine("Kunne ikke finde opgaven for det givne trin");
            return Task.CompletedTask;
        }
    }
    
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.File;
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // Max størrelse: 10 MB
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer);
            currentStep.ImageBase64 = Convert.ToBase64String(buffer);
            
            Console.WriteLine("Billedet er blevet konverteret til base64 og gemt i ImageBase64.");

        }
        else
        {
            Console.WriteLine("Ingen fil valgt");
        }
    }
}
