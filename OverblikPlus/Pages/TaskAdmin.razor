@page "/admin/tasks"
@inject HttpClient Http

<h3>Administrer Opgaver</h3>

<!-- Formular til oprettelse/ændring af en task -->
<div class="task-form">
    <h4>@(isEditMode ? "Rediger Opgave" : "Opret Ny Opgave")</h4>
    <div class="form-group">
        <label>Navn:</label>
        <input @bind="currentTask.Name" />
    </div>
    <div class="form-group">
        <label>Beskrivelse:</label>
        <textarea @bind="currentTask.Description"></textarea>
    </div>
    <div class="form-group">
        <label>Billede:</label>
        <InputFile OnChange="HandleImageUpload" />
    </div>
    <div class="form-group">
        <label for="user">Assign User</label>
        <select id="user" @bind="currentTask.UserId" class="form-control">
            <option value="">Select User</option>
            @foreach (var user in users)
            {
            <option value="@user.Id">@user.FirstName @user.LastName</option>
            }
        </select>
    </div>
    <div class="button-group">
        <button @onclick="SaveTask">@((isEditMode) ? "Opdater Opgave" : "Opret Opgave")</button>
        <button @onclick="CancelEdit" class="cancel-button" style="display:@(isEditMode ? "inline-block" : "none")">Annuller</button>
    </div>
</div>

<hr />

<!-- Liste over opgaver -->
<ul class="task-list">
    @foreach (var task in Tasks)
    {
    <li class="task-item">
        <h4>@task.Name</h4>
        <p>@task.Description</p>
        <img src="@task.Image" alt="Opgave Billede" class="task-image" />

        <div class="button-group">
            <button @onclick="() => EditTask(task)">Rediger</button>
            <button @onclick="() => DeleteTask(task.Id)" class="delete-button">Slet</button>
        </div>

        <h5>Trin:</h5>
        <ul class="task-step-list">
            @foreach (var step in task.Steps)
            {
            <li class="task-step-item">
                <p>@step.Text</p>
                <img src="@step.Image" alt="Trin Billede" class="step-image" />
                <div class="button-group">
                    <button @onclick="() => EditStep(step)">Rediger Trin</button>
                    <button @onclick="() => DeleteStep(step.Id)" class="delete-button">Slet Trin</button>
                </div>
            </li>
            }
        </ul>
        <button @onclick="() => AddStep(task.Id)">Tilføj Trin</button>
    </li>
    }
</ul>

<!-- Formular til tilføjelse af trin -->
@if (isAddingStep)
{
<div class="task-step-form">
    <h5>Tilføj et trin</h5>
    <div class="form-group">
        <label>Beskrivelse:</label>
        <textarea @bind="newStep.Text"></textarea>
    </div>
    <div class="form-group">
        <label>Billede:</label>
        <InputFile OnChange="HandleStepImageUpload" />
    </div>
    <div class="form-group">
        <label>Kræver QR-kode scanning:</label>
        <input type="checkbox" @bind="newStep.RequiresQrCodeScan" />
    </div>
    <div class="button-group">
        <button @onclick="SaveTaskStep">Tilføj Trin</button>
        <button @onclick="CancelAddStep" class="cancel-button">Annuller</button>
    </div>
</div>
}

@code {
    private List<ReadTaskDto> Tasks { get; set; } = new List<ReadTaskDto>();
    private CreateTaskDto currentTask = new CreateTaskDto();
    private bool isEditMode = false;
    private bool isAddingStep = false;
    private CreateTaskStepDto newStep = new CreateTaskStepDto();
    private int currentTaskIdForStep = 0;
    private List<ReadUserDto> users { get; set; } = new List<ReadUserDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        Tasks = await Http.GetFromJsonAsync<List<ReadTaskDto>>("/api/Task");
    }

    private async Task SaveTask()
    {
        if (isEditMode)
        {
            await Http.PutAsJsonAsync($"/api/Task/{currentTask.Id}", currentTask);
        }
        else
        {
            await Http.PostAsJsonAsync("/api/Task", currentTask);
        }

        currentTask = new CreateTaskDto();
        isEditMode = false;
        await LoadTasks();
    }

    private void EditTask(ReadTaskDto task)
    {
        currentTask = new CreateTaskDto
        {
            Id = task.Id,
            Name = task.Name,
            Description = task.Description,
            ImageBase64 = task.Image,
            RequiresQrCodeScan = task.RequiresQrCodeScan
        };
        isEditMode = true;
    }

    private async Task DeleteTask(int taskId)
    {
        await Http.DeleteAsync($"/api/Task/{taskId}");
        await LoadTasks();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.GetMultipleFiles(1).FirstOrDefault();
            if (file != null)
            {
                using var stream = file.OpenReadStream(1024 * 1024 * 10); // Max størrelse på f.eks. 10MB
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                currentTask.ImageBase64 = Convert.ToBase64String(buffer);
            }
        }
    }

    private void AddStep(int taskId)
    {
        currentTaskIdForStep = taskId;
        newStep = new CreateTaskStepDto { TaskId = taskId };
        isAddingStep = true;
    }

    private async Task SaveTaskStep()
    {
        newStep.TaskId = currentTaskIdForStep;

        // Send trin data til API'et
        await Http.PostAsJsonAsync($"/api/tasks/{currentTaskIdForStep}/steps", newStep);

        // Opdater listen af trin for den aktuelle opgave
        await LoadTaskSteps(currentTaskIdForStep);

        // Ryd op efter tilføjelsen
        isAddingStep = false;
        newStep = new CreateTaskStepDto();
    }

    private void CancelAddStep()
    {
        isAddingStep = false;
        newStep = new CreateTaskStepDto();
    }

    private async Task HandleStepImageUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.GetMultipleFiles(1).FirstOrDefault();
            if (file != null)
            {
                using var stream = file.OpenReadStream(1024 * 1024 * 10); // Max størrelse på f.eks. 10MB
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                newStep.ImageBase64 = Convert.ToBase64String(buffer);
            }
        }
    }

    private async Task LoadTaskSteps(int taskId)
    {
        var response = await Http.GetFromJsonAsync<List<TaskStepDto>>($"/api/tasks/{taskId}/steps");
        var task = Tasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.Steps = response ?? new List<TaskStepDto>();
            StateHasChanged();
        }
    }
    
    private void CancelEdit()
    {
        currentTask = new CreateTaskDto();
        isEditMode = false;
    }

    private void EditStep(TaskStepDto step)
    {
        // Implementer logik til at redigere trin her
    }

    private async Task DeleteStep(int stepId)
    {
        // Implementer logik til at slette trin her
    }
}

