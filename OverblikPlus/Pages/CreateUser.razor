@page "/create-user"
@using OverblikPlus.Dtos.User
@using OverblikPlus.Services.Interfaces
@inject CustomAuthStateProvider AuthStateProvider

<h3>Opret Bruger</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}


<EditForm Model="@newUser" OnValidSubmit="@HandleCreateUser" class="user-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">Fornavn</label>
        <InputText id="firstName" @bind-Value="newUser.FirstName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="lastName">Efternavn</label>
        <InputText id="lastName" @bind-Value="newUser.LastName" class="form-control" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="newUser.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="newUser.Password" class="form-control" />
    </div>
    @if (isAdmin)
    {
        <div class="form-group">
            <label for="role">Rolle</label>
            <InputText id="role" @bind-Value="newUser.Role" class="form-control" />
        </div>
    }


    <button type="submit" class="btn btn-primary">Opret Bruger</button>
</EditForm>

@code {
    private CreateUserDto newUser = new CreateUserDto();
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isAdmin = false;

    [Inject] public IUserService UserService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var role = await AuthStateProvider.GetRoleAsync();
        isAdmin = role is "Admin";
    }

    private async Task HandleCreateUser()
    {
        try
        {
            if (string.IsNullOrEmpty(newUser.Role))
            {
                newUser.Role = "User";
            }

            var result = await UserService.CreateUser(newUser);

            if (result.Success)
            {
                successMessage = "User created successfully.";
                errorMessage = string.Empty;
                newUser = new CreateUserDto();
            }
            else
            {
                errorMessage = $"Error creating user: {result.Error}";
                successMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            successMessage = string.Empty;
            errorMessage = $"Error creating user: {ex.Message}";
        }
    }
}