@page "/relative-tasks/{userId}"
@using OverblikPlus.Models.Dtos.Tasks
@using OverblikPlus.Services.Interfaces
@inject ITaskService TaskService

<div class="container mt-4">
    <h3>Opgaver for @_selectedDate.ToShortDateString()</h3>
    <div class="d-flex justify-content-between mb-3">
        <button class="btn btn-secondary" @onclick="PreviousDay">Forrige Dag</button>
        <button class="btn btn-secondary" @onclick="NextDay">NÃ¦ste Dag</button>
    </div>
    <ul class="list-group">
        @if (_tasks.Count > 0)
        {
            @foreach (var task in _tasks)
            {
                <li class="list-group-item">
                    <h5>@task.Name</h5>
                    <p>@task.Description</p>
                </li>
            }
        }
        else
        {
            <p>Ingen opgaver for denne dag.</p>
        }
    </ul>
</div>

@code {
    [Parameter] public string? UserId { get; set; }
    private List<ReadTaskDto> _tasks = new();
    private DateTime _selectedDate = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        if (UserId == null)
            throw new Exception("Fejl ved hentning?");
        
        var result = await TaskService.GetTasksForDay(UserId, _selectedDate);
        if (result.Success)
        {
            var data = result.Data;

            if (data == null)
                _tasks = new List<ReadTaskDto>();
            
            _tasks = data!;
        }
        else
        {
            Console.WriteLine($"Error: {result.Error}");
            _tasks = new List<ReadTaskDto>();
        }

    }

    private async Task PreviousDay()
    {
        _selectedDate = _selectedDate.AddDays(-1);
        await LoadTasks();
    }

    private async Task NextDay()
    {
        _selectedDate = _selectedDate.AddDays(1);
        await LoadTasks();
    }
}