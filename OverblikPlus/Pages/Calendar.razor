@page "/calendar"
@using System.Text
@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Services.Interfaces
@inject ITaskService TaskService
@inject IJSRuntime JS

<div class="container mt-4">
    <h3 class="mb-4">Kalender</h3>

    <!-- Navigationskontrol -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <button class="btn btn-primary" @onclick="PreviousMonth">Forrige måned</button>
        <h4>@selectedMonth.ToString("MMMM yyyy")</h4>
        <button class="btn btn-primary" @onclick="NextMonth">Næste måned</button>
    </div>

    <!-- Fast Download-knap -->
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success" @onclick="DownloadCalendarFile">Download Kalender</button>
    </div>

    <!-- Kalendergrid -->
    <div class="calendar-header">
        @foreach (var dayName in dayNames)
        {
        <div>@dayName</div>
        }
    </div>
    <div class="calendar-grid">
        @foreach (var day in daysInMonth)
        {
        <div class="calendar-cell @(day.Date == DateTime.Today ? "today" : "")" @onclick="() => OpenDayDetails(day)">
            <div class="date-number">@day.Day</div>
            @if (tasksForMonth.ContainsKey(day.Date))
            {
            <ul class="task-list">
                @foreach (var task in tasksForMonth[day.Date])
                {
                <li class="task-item">@task.Name</li>
                }
            </ul>
            }
        </div>
        }
    </div>

    <!-- Modal for opgaveoplysninger -->
    @if (showModal)
    {
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-labelledby="taskModalLabel" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Aftaler for @selectedDate.ToShortDateString()</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <ul class="task-list">
                        @if (tasksForMonth.ContainsKey(selectedDate))
                        {
                        @foreach (var task in tasksForMonth[selectedDate])
                        {
                        <li>@task.Name</li>
                        }
                        }
                        else
                        {
                        <li>Ingen aftaler</li>
                        }
                    </ul>

                    <div class="mb-3">
                        <label for="newTaskName" class="form-label">Tilføj ny aftale:</label>
                        <input type="text" id="newTaskName" @bind="newTaskName" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Luk</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTask">Tilføj</button>
                </div>
            </div>
        </div>
    </div>
    }
</div>


@code {
    private DateTime selectedMonth = DateTime.Today;
    private List<DateTime> daysInMonth = new();
    private Dictionary<DateTime, List<ReadTaskDto>> tasksForMonth = new();
    private string[] dayNames = { "Man", "Tir", "Ons", "Tor", "Fre", "Lør", "Søn" };
    private bool showModal = false;
    private DateTime selectedDate;
    private string newTaskName;
    private HashSet<string> downloadedTasks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasksForMonth();
    }

    private async Task LoadTasksForMonth()
    {
        daysInMonth = Enumerable.Range(1, DateTime.DaysInMonth(selectedMonth.Year, selectedMonth.Month))
                                .Select(day => new DateTime(selectedMonth.Year, selectedMonth.Month, day))
                                .ToList();

        tasksForMonth = new Dictionary<DateTime, List<ReadTaskDto>>
        {
            { DateTime.Today, new List<ReadTaskDto> { new ReadTaskDto { Name = "Læge kl. 10:40" } } },
            { DateTime.Today.AddDays(1), new List<ReadTaskDto> { new ReadTaskDto { Name = "Møde kl. 14:00" } } }
        };
    }

    private void PreviousMonth()
    {
        selectedMonth = selectedMonth.AddMonths(-1);
        _ = LoadTasksForMonth();
    }

    private void NextMonth()
    {
        selectedMonth = selectedMonth.AddMonths(1);
        _ = LoadTasksForMonth();
    }

    private void OpenDayDetails(DateTime date)
    {
        selectedDate = date;
        newTaskName = string.Empty;
        showModal = true;
    }

    private void AddTask()
    {
        if (!tasksForMonth.ContainsKey(selectedDate))
        {
            tasksForMonth[selectedDate] = new List<ReadTaskDto>();
        }

        tasksForMonth[selectedDate].Add(new ReadTaskDto { Name = newTaskName });
        newTaskName = string.Empty;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task DownloadCalendarFile()
    {
        var builder = new StringBuilder();
        builder.AppendLine("BEGIN:VCALENDAR");
        builder.AppendLine("VERSION:2.0");
        builder.AppendLine("PRODID:-//OverblikPlus//Calendar//EN");

        foreach (var taskGroup in tasksForMonth)
        {
            foreach (var task in taskGroup.Value)
            {
                var taskId = $"{taskGroup.Key:yyyyMMdd}-{task.Name}";
                if (downloadedTasks.Contains(taskId)) continue;

                var startDate = taskGroup.Key;
                var endDate = startDate.AddHours(1);

                builder.AppendLine("BEGIN:VEVENT");
                builder.AppendLine($"SUMMARY:{task.Name}");
                builder.AppendLine($"DTSTART:{startDate:yyyyMMddTHHmmssZ}");
                builder.AppendLine($"DTEND:{endDate:yyyyMMddTHHmmssZ}");
                builder.AppendLine($"DESCRIPTION:{task.Description ?? ""}");
                builder.AppendLine($"UID:{Guid.NewGuid()}");
                builder.AppendLine("END:VEVENT");
                
                downloadedTasks.Add(taskId);
            }
        }

        builder.AppendLine("END:VCALENDAR");

        var bytes = Encoding.UTF8.GetBytes(builder.ToString());
        var base64 = Convert.ToBase64String(bytes);

        await JS.InvokeVoidAsync("downloadFile", "calendar.ics", "text/calendar", base64);
    }
}
