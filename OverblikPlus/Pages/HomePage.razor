@page "/"

@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Dtos.User
@using OverblikPlus.Services.Interfaces
@inject IUserService UserService
@inject ITaskService TaskService
@inject CustomAuthStateProvider AuthStateProvider

<div class="container mt-4">
    <h1 class="mb-4">Velkommen, @user.FirstName @user.LastName!</h1>

    <h3 class="mb-3">Dagens Opgaver</h3>
    <ul class="list-group mb-4">
        @foreach (var task in todaysTasks)
        {
            <li class="list-group-item d-flex align-items-center">
                <input
                    type="checkbox"
                    class="form-check-input me-2"
                    checked="@task.IsCompleted"
                    @onchange="async (e) => await OnTaskStatusChanged(task.Id, ((ChangeEventArgs)e).Value is bool value && value)" />
                <span>@task.Name</span>
            </li>
        }
    </ul>

    <h3 class="mb-3">Fremgangen med dine opgaver</h3>
    <div class="progress mb-4" style="height: 25px;">
        <div class="progress-bar bg-success" role="progressbar" style="width: @(taskCompletionPercentage)%;">
            @(taskCompletionPercentage)%
        </div>
    </div>
</div>

@code {
    private ReadUserDto user = new();
    private List<ReadTaskDto> todaysTasks = new();
    private double taskCompletionPercentage = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshTasks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}");
        }
    }

    private async Task RefreshTasks()
    {
        try
        {
            var userId = await AuthStateProvider.GetUserIdAsync();
            Console.WriteLine($"User ID: {userId}");

            if (!string.IsNullOrEmpty(userId))
            {
                user = await UserService.GetUserById(userId);
                Console.WriteLine($"User loaded: {user.FirstName} {user.LastName}");

                var allTasks = await TaskService.GetTasksForUserAsync(userId);
                Console.WriteLine($"All tasks loaded: {allTasks.Count} tasks retrieved.");
                
                todaysTasks = allTasks.Where(task =>
                    string.IsNullOrEmpty(task.RecurrenceType) || task.RecurrenceType == "None" ||
                    task.NextOccurrence.Date == DateTime.Today).ToList();

                UpdateProgress();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing tasks: {ex.Message}");
        }
    }


    private void UpdateProgress()
    {
        if (todaysTasks.Count > 0)
        {
            var completedTasks = todaysTasks.Count(t => t.IsCompleted);
            taskCompletionPercentage = (double)completedTasks / todaysTasks.Count * 100;
        }
        else
        {
            taskCompletionPercentage = 0;
        }

        LogTaskStatus();

        Console.WriteLine($"Progress updated: {taskCompletionPercentage}% completed.");
        StateHasChanged();
    }

    private async Task OnTaskStatusChanged(int taskId, bool isCompleted)
    {
        try
        {
            Console.WriteLine($"Task status changed. Task ID: {taskId}, IsCompleted: {isCompleted}");

            if (isCompleted)
            {
                Console.WriteLine($"Marking task {taskId} as completed...");
                await TaskService.MarkTaskAsCompleted(taskId);
                Console.WriteLine($"Task {taskId} marked as completed.");
            }

            await RefreshTasks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task status: {ex.Message}");
        }
    }

    private void LogTaskStatus()
    {
        foreach (var task in todaysTasks)
        {
            Console.WriteLine($"Task Id {task.Id}, IsCompleted: {task.IsCompleted}");
        }
    }
}
