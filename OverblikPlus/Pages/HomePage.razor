@page "/"
@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Dtos.User
@using OverblikPlus.Services.Interfaces
@inject IUserService UserService
@inject ITaskService TaskService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Velkommen, @user.FirstName @user.LastName!</h1>
        <select @bind="taskViewMode" class="form-select w-auto">
            <option value="Single">Én opgave ad gangen</option>
            <option value="List">Listevisning</option>
        </select>
    </div>

    @if (taskViewMode == "Single")
    {
        <div class="card mb-4">
            @if (uncompletedTasks.Count > 0)
            {
                var currentTask = uncompletedTasks[currentTaskIndex];
                <div class="card-header">
                    <h4>@currentTask.Name</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(currentTask.Image))
                    {
                        <img src="@currentTask.Image" alt="Task Image" class="img-fluid mb-3" style="max-width: 100%; height: auto;" />
                    }
                    <p>@currentTask.Description</p>
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-primary" @onclick="() => GoToTaskSteps(currentTask.Id)">Gå til trin</button>
                        <button class="btn btn-secondary" @onclick="NextTask">Næste</button>
                    </div>
                </div>
            }
            else
            {
                <p>Ingen uløste opgaver for i dag!</p>
            }
        </div>
    }
    else if (taskViewMode == "List")
    {
        <ul class="list-group mb-4">
            @foreach (var task in todaysTasks)
            {
                <li class="list-group-item d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(task.Image))
                    {
                        <img src="@task.Image" alt="Task Image" class="img-thumbnail me-3" style="max-width: 50px; max-height: 50px;" />
                    }
                    <input
                        type="checkbox"
                        class="form-check-input me-2"
                        checked="@task.IsCompleted"
                        @onchange="async (e) => await OnTaskStatusChanged(task.Id, ((ChangeEventArgs)e).Value is bool value && value)" />
                    <span>@task.Name</span>
                </li>
            }
        </ul>
    }

    <h3 class="mb-3">Fremgangen med dine opgaver</h3>
    <div class="progress mb-4" style="height: 25px;">
        <div class="progress-bar bg-success" role="progressbar" style="width: @(taskCompletionPercentage)%;">
            @(taskCompletionPercentage)%
        </div>
    </div>
</div>

@code {
    private ReadUserDto user = new();
    private List<ReadTaskDto> todaysTasks = new();
    private List<ReadTaskDto> uncompletedTasks => todaysTasks.Where(t => !t.IsCompleted).ToList();
    private double taskCompletionPercentage = 0;
    private string taskViewMode = "Single"; // Default view mode
    private int currentTaskIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
    }

    private async Task RefreshTasks()
    {
        try
        {
            // Hent bruger-ID
            var userId = await AuthStateProvider.GetUserIdAsync();
            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("User ID is null or empty.");
                todaysTasks = new List<ReadTaskDto>();
                return; // Afslut metoden tidligt, hvis der ikke er et gyldigt bruger-ID
            }

            // Hent brugerdata
            user = await UserService.GetUserById(userId);

            // Hent opgaver
            var result = await TaskService.GetTasksForUserAsync(userId);

            if (!result.Success) // Håndter fejl, hvis hentning mislykkes
            {
                Console.WriteLine($"Fejl ved hentning af opgaver: {result.Error}");
                todaysTasks = new List<ReadTaskDto>();
                return; // Afslut metoden, da vi ikke kan behandle data
            }

            // Filtrer opgaver for i dag
            todaysTasks = result.Data
                .Where(task =>
                    string.IsNullOrEmpty(task.RecurrenceType) || 
                    task.RecurrenceType == "None" ||
                    (task.NextOccurrence.HasValue && task.NextOccurrence.Value.Date == DateTime.Today))
                .ToList();

            // Nulstil task-index og opdater fremgang
            currentTaskIndex = 0;
            UpdateProgress();
        }
        catch (Exception ex)
        {
            // Fang uventede fejl og log dem
            Console.WriteLine($"Uventet fejl i RefreshTasks: {ex.Message}");
            todaysTasks = new List<ReadTaskDto>();
        }
    }



    private void UpdateProgress()
    {
        if (todaysTasks.Count > 0)
        {
            var completedTasks = todaysTasks.Count(t => t.IsCompleted);
            taskCompletionPercentage = (double)completedTasks / todaysTasks.Count * 100;
        }
        else
        {
            taskCompletionPercentage = 0;
        }

        StateHasChanged();
    }

    private void NextTask()
    {
        if (uncompletedTasks.Count == 0)
            return;

        currentTaskIndex = (currentTaskIndex + 1) % uncompletedTasks.Count;
    }

    private async Task GoToTaskSteps(int taskId)
    {
        NavigationManager.NavigateTo($"/task-steps/{taskId}");
    }

    private async Task OnTaskStatusChanged(int taskId, bool isCompleted)
    {
        if (isCompleted)
        {
            await TaskService.MarkTaskAsCompleted(taskId);
        }

        await RefreshTasks();
    }
}
