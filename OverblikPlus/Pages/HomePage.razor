@page "/"
@using OverblikPlus.Dtos
@using OverblikPlus.Dtos.Employee
@using OverblikPlus.Dtos.Notification
@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Dtos.User
@using OverblikPlus.Services.Interfaces
@inject IUserService UserService
@inject ITaskService TaskService
@inject CustomAuthStateProvider AuthStateProvider

<div class="container mt-4">
    <h1 class="mb-4">Velkommen, @user.FirstName @user.LastName!</h1>
    
    <h3 class="mb-3">Dagens Opgaver</h3>
    <ul class="list-group mb-4">
        @foreach (var task in todaysTasks)
        {
            <li class="list-group-item d-flex align-items-center">
                <input type="checkbox" class="form-check-input me-2" @bind="task.IsCompleted" />
                <span>@task.Name</span>
            </li>
        }
    </ul>
    
    <h3 class="mb-3">Notifikationer</h3>
    <ul class="list-group mb-4">
        @foreach (var notification in notifications)
        {
            <li class="list-group-item">@notification.Message</li>
        }
    </ul>

    <h3 class="mb-3">Fremgangen med dine opgaver</h3>
    <div class="progress mb-4" style="height: 25px;">
        <div class="progress-bar" role="progressbar" style="width: @(xpPercentage)%;">
            @(xpPercentage)%
        </div>
    </div>
    
    <h3 class="mb-3">Medarbejder Status</h3>
    <table class="table table-striped mb-4">
        <thead>
            <tr>
                <th>Medarbejder</th>
                <th>Gruppe</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Group</td>
                </tr>
            }
        </tbody>
    </table>
    
    <h3 class="mb-3">Personlig Kalender</h3>
    <p>Her kan brugeren se deres kommende aftaler og aktiviteter.</p>
</div>

@code {
    private ReadUserDto user = new();
    private List<ReadTaskDto> todaysTasks = new();
    private List<NotificationDto> notifications = new();
    private List<EmployeeDto> employees = new();
    private double xpPercentage = 0;

    protected override async Task OnInitializedAsync()
    {
        
        var userId = await AuthStateProvider.GetUserIdAsync();
        Console.WriteLine($"First Name: {user.FirstName}, Last Name {user.FirstName}");
        Console.WriteLine($"User Id from token: {userId}");
        
        if (!string.IsNullOrEmpty(userId))
        {
            user = await UserService.GetUserById(userId); 
            StateHasChanged();
            todaysTasks = await TaskService.GetAllTasks();
            // notifications = await NotificationService.GetNotificationsAsync();
            // employees = await EmployeeService.GetEmployeesStatusAsync();
            // xpPercentage = user.XP / 100.0 * 100; // XP as a percentage
        }
    }
}
