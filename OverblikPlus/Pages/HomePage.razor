@page "/"
@using OverblikPlus.AuthHelpers
@using OverblikPlus.Models.Dtos.Tasks
@using OverblikPlus.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject ITaskService TaskService
@inject ITaskStepService TaskStepService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@using System.Timers

<div class="container mt-4">
    <AuthorizeView>
        <Authorized>
            @if (showWelcomeMessage)
            {
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1>Velkommen, @AuthStateProvider.User?.FirstName</h1>
                </div>
            }
            <select @bind="taskViewMode" class="form-select w-auto">
                <option value="Single">Én opgave ad gangen</option>
                <option value="List">Listevisning</option>
            </select>

            @if (taskViewMode == "Single")
            {
                <div class="card mb-4">
                    @if (uncompletedTasks.Count > 0)
                    {
                        var currentTask = uncompletedTasks[currentTaskIndex];
                        <div class="card-header">
                            <h4>@currentTask.Name</h4>
                        </div>
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(currentTask.Image))
                            {
                                <img src="@currentTask.Image" alt="Task Image" class="img-fluid mb-3" style="max-width: 100%; height: auto; max-height: 300px;"/>
                            }
                            <p>@currentTask.Description</p>
                            <div class="d-flex justify-content-between">
                                @if (currentTask.HasSteps)
                                {
                                    <button class="btn btn-primary" @onclick="() => GoToTaskSteps(currentTask.Id)">Gå til trin</button>
                                }
                                <button class="btn btn-secondary" @onclick="NextTask">Næste</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p>Ingen uløste opgaver for i dag!</p>
                    }
                </div>
            }
            else if (taskViewMode == "List")
            {
                <ul class="list-group mb-4">
                    @foreach (var task in todaysTasks)
                    {
                        <li class="list-group-item d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(task.Image))
                            {
                                <img src="@task.Image" alt="Task Image" class="img-thumbnail me-3" style="max-width: 50px; max-height: 50px;"/>
                            }
                            <input
                                type="checkbox"
                                class="form-check-input me-2"
                                checked="@task.IsCompleted"
                                @onchange="async (e) => await OnTaskStatusChanged(task.Id, ((ChangeEventArgs)e).Value is bool value && value)"/>
                            <span>@task.Name</span>
                        </li>
                    }
                </ul>

                <h3 class="mb-3">Fremgangen med dine opgaver</h3>
                <div class="progress mb-4" style="height: 25px;">
                    <div class="progress-bar bg-success" role="progressbar" style="width: @(taskCompletionPercentage)%;">
                        @(taskCompletionPercentage)%
                    </div>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <h1>Velkommen, Gå til Login </h1>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private List<ReadTaskDto> todaysTasks = new();
    private List<ReadTaskDto> uncompletedTasks => todaysTasks.Where(t => !t.IsCompleted).ToList();
    private int taskCompletionPercentage = 0;
    private string taskViewMode = "Single";
    private int currentTaskIndex = 0;
    private bool showWelcomeMessage = true;
    private Timer welcomeMessageTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
        StartWelcomeMessageTimer();
    }

    private async Task RefreshTasks()
    {
        try
        {
            var result = await TaskService.GetTasksForUserAsync(AuthStateProvider.User.Id);

            if (!result.Success)
            {
                Console.WriteLine($"Fejl ved hentning af opgaver: {result.Error}");
                todaysTasks = new List<ReadTaskDto>();
                return;
            }

            todaysTasks = FilterTasks(result.Data);

            currentTaskIndex = 0;
            UpdateProgress();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Uventet fejl i RefreshTasks: {ex.Message}");
            todaysTasks = new List<ReadTaskDto>();
        }
    }

    private static List<ReadTaskDto> FilterTasks(List<ReadTaskDto> tasks)
    {
        var today = DateTime.Today;

        return tasks.Where(task =>
                task.NextOccurrence.HasValue && task.NextOccurrence.Value.Date == today || task.StartDate == today)
            .ToList();
    }

    private void UpdateProgress()
    {
        if (todaysTasks.Count > 0)
        {
            var completedTasks = todaysTasks.Count(t => t.IsCompleted);
            taskCompletionPercentage = (int)Math.Round((double)completedTasks / todaysTasks.Count * 100);
        }
        else
        {
            taskCompletionPercentage = 0;
        }

        StateHasChanged();
    }

    private async Task NextTask()
    {
        if (uncompletedTasks.Count == 0)
            return;

        currentTaskIndex = (currentTaskIndex + 1) % uncompletedTasks.Count;
        await Task.CompletedTask;
    }

    private async Task GoToTaskSteps(int taskId)
    {
        var steps = await TaskStepService.GetStepsForTask(taskId);
        if (steps != null && steps.Count > 0)
        {
            NavigationManager.NavigateTo($"/task-step-view/{taskId}/step/{steps.First().Id}");
        }
        else
        {
            Console.WriteLine($"No steps found for task {taskId}");
        }
    }

    private async Task OnTaskStatusChanged(int taskId, bool isCompleted)
    {
        if (isCompleted)
        {
            await TaskService.MarkTaskAsCompleted(taskId);
        }

        var task = todaysTasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.IsCompleted = isCompleted;
            UpdateProgress();
        }
    }

    private void StartWelcomeMessageTimer()
    {
        welcomeMessageTimer = new Timer(5000); 
        welcomeMessageTimer.Elapsed += HideWelcomeMessage;
        welcomeMessageTimer.AutoReset = false;
        welcomeMessageTimer.Start();
    }

    private void HideWelcomeMessage(object sender, ElapsedEventArgs e)
    {
        showWelcomeMessage = false;
        InvokeAsync(StateHasChanged);
    }

}