@page "/tasks"
@using OverblikPlus.Dtos.Tasks
@using OverblikPlus.Services.Interfaces
@inject ITaskService TaskService
@inject ITaskStepService TaskStepService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h1 class="mb-4">Oversigt over opgaver</h1>

    <!-- Date Navigation -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <button class="btn btn-secondary" @onclick="ShowPreviousDay">
            Forrige Dag
        </button>
        <h4>@SelectedDate.ToString("dddd, dd MMMM yyyy")</h4>
        <button class="btn btn-secondary" @onclick="ShowNextDay">
            NÃ¦ste Dag
        </button>
    </div>

    <!-- Task List for the Selected Day -->
    @if (FilteredTasks.Any())
    {
    <ul class="list-group">
        @foreach (var task in FilteredTasks)
        {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <div>
                <h5>@task.Name</h5>
                <p class="mb-1">@task.Description</p>
                @if (!string.IsNullOrEmpty(task.Image))
                {
                <img src="@task.Image" alt="Task Image" class="img-thumbnail" style="max-width: 120px; max-height: 120px; object-fit: cover;" />
                }
            </div>
            @if (task.IsCompleted)
            {
            <span class="text-success">&#x2714;</span>
            }
            else if (task.HasSteps)
            {
            <button class="btn btn-primary" @onclick="() => GoToTaskSteps(task.Id)">Se trin</button>
            }
        </li>
        }
    </ul>
    }
    else
    {
    <p>Ingen opgaver for denne dag.</p>
    }
</div>

@code {
    private List<ReadTaskDto> AllTasks { get; set; } = new();
    private List<ReadTaskDto> FilteredTasks { get; set; } = new();
    private DateTime SelectedDate { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
        FilterTasksByDate();
    }

    private async Task LoadTasks()
    {
        try
        {
            var userId = AuthStateProvider.GetUserIdAsync();
            if (!string.IsNullOrEmpty(userId))
            {
                var result = await TaskService.GetTasksForUserAsync(userId);

                if (result.Success)
                {
                    AllTasks = result.Data ?? new List<ReadTaskDto>();
                    Console.WriteLine($"Loaded {AllTasks.Count} tasks for user {userId}");

                    foreach (var task in AllTasks)
                    {
                        task.HasSteps = (await TaskStepService.GetStepsForTask(task.Id)).Any();
                        Console.WriteLine($"Task: {task.Name}, NextOccurrence: {task.NextOccurrence}, HasSteps: {task.HasSteps}");
                    }
                }
                else
                {
                    Console.WriteLine($"Error loading tasks: {result.Error}");
                    AllTasks = new List<ReadTaskDto>();
                }
            }
            else
            {
                Console.WriteLine("User ID is null or empty.");
                AllTasks = new List<ReadTaskDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
            AllTasks = new List<ReadTaskDto>();
        }
    }

    private void FilterTasksByDate()
    {
        FilteredTasks = AllTasks
            .Where(task =>
                    (!task.NextOccurrence.HasValue && task.RecurrenceType == "None" 
                                                   && task.StartDate.Date == SelectedDate.Date)

                    || (task.NextOccurrence.HasValue 
                        && task.NextOccurrence.Value.Date == SelectedDate.Date)

                    || (task.RecurrenceType == "Daily" && task.NextOccurrence.HasValue
                                                       && (SelectedDate.Date - task.NextOccurrence.Value.Date).Days % task.RecurrenceInterval == 0)

                    || (task.RecurrenceType == "Weekly" && task.NextOccurrence.HasValue
                                                        && (SelectedDate.Date - task.NextOccurrence.Value.Date).Days % (task.RecurrenceInterval * 7) == 0))
            .ToList();

        Console.WriteLine($"Filtered {FilteredTasks.Count} tasks for date {SelectedDate.Date}");
    }


    private void ShowPreviousDay()
    {
        SelectedDate = SelectedDate.AddDays(-1);
        FilterTasksByDate();
    }

    private void ShowNextDay()
    {
        SelectedDate = SelectedDate.AddDays(1);
        FilterTasksByDate();
    }

    private async Task GoToTaskSteps(int taskId)
    {
        var steps = await TaskStepService.GetStepsForTask(taskId);
        if (steps != null && steps.Count > 0)
        {
            NavigationManager.NavigateTo($"/task-step-view/{taskId}/step/{steps.First().Id}");
        }
        else
        {
            Console.WriteLine($"No steps found for task {taskId}");
        }
    }
}