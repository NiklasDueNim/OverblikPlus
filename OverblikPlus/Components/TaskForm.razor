@using OverblikPlus.AuthHelpers
@using OverblikPlus.Models.Dtos.User
@using OverblikPlus.Models.FormModels
@inject CustomAuthStateProvider AuthStateProvider

<div class="card mb-4">
    <div class="card-header">
        <h4 class="card-title">@Title</h4>
    </div>
    <div class="card-body">
        <form>
            <div class="mb-3">
                <label for="taskName" class="form-label">Navn:</label>
                <input id="taskName" @bind="Task.Name" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="taskDescription" class="form-label">Beskrivelse:</label>
                <textarea id="taskDescription" @bind="Task.Description" class="form-control"></textarea>
            </div>
            <div class="mb-3">
                <label for="taskImage" class="form-label">Billede:</label>
                <InputFile OnChange="HandleImageUpload" class="form-control" />
            </div>

            <div class="mb-3">
                @if (isAdminOrStaff)
                {
                    <label for="user" class="form-label">Tildel opgave til en bruger</label>
                    <select id="user" @bind="Task.UserId" class="form-select">
                        <option value="">Vælg bruger</option>
                        @foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.FirstName @user.LastName</option>
                        }
                    </select>
                }
            </div>

            <div class="mb-3">
                <label for="recurrenceType" class="form-label">Gentagelsestype:</label>
                <select id="recurrenceType" @bind="Task.RecurrenceType" class="form-select">
                    <option value="None">Ingen gentagelse</option>
                    <option value="Daily">Daglig</option>
                    <option value="Weekly">Ugentlig</option>
                    <option value="Monthly">Månedlig</option>
                </select>
            </div>

            <div class="mb-3" style="display:@(Task.RecurrenceType == "None" ? "none" : "block")">
                <label for="recurrenceInterval" class="form-label">Gentagelsesinterval:</label>
                <input id="recurrenceInterval" type="number" @bind="Task.RecurrenceInterval" class="form-control" min="1" />
            </div>

            <div class="mb-3">
                <label for="startDate" class="form-label">Startdato:</label>
                <input id="startDate" type="date" @bind="Task.StartDate" class="form-control" />
            </div>


            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-primary me-2" @onclick="Save">Gem</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Annuller</button>
            </div>
        </form>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public TaskFormModel Task { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public List<ReadUserDto> Users { get; set; }
    private bool isAdminOrStaff;
    
    protected override async Task OnInitializedAsync()
    {
        var role = await AuthStateProvider.GetRoleAsync();
        isAdminOrStaff = role == "Admin" || role == "Staff";
        
        if (string.IsNullOrEmpty(Task.RecurrenceType))
        {
            Task.RecurrenceType = "None";
            Task.RecurrenceInterval = 1;
            Task.StartDate = DateTime.Now;
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            var file = e.File;
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer);
            Task.ImageBase64 = Convert.ToBase64String(buffer);
        }
    }

    private async Task Save() => await OnSave.InvokeAsync();
    private async Task Cancel() => await OnCancel.InvokeAsync();
}
