@using OverblikPlus.Models.Dtos.Tasks
@using OverblikPlus.Models.Dtos.TaskSteps
<ul class="list-group">
    @foreach (var task in Tasks)
    {
        <li class="list-group-item mb-2">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="task-name">@task.Name</h5>
                    <p>@task.Description</p>
                    @if (!string.IsNullOrEmpty(task.Image))
                    {
                        var fixedImageUrl = FixImageUrl(task.Image);
                        <img src="@fixedImageUrl" alt="Opgave Billede" class="fixed-size-image img-thumbnail" />
                    }
                </div>
                <div>
                    <button class="btn btn-primary me-2" @onclick="() => OnEditTask.InvokeAsync(task)">Rediger</button>
                    <button class="btn btn-danger" @onclick="() => OnDeleteTask.InvokeAsync(task.Id)">Slet</button>
                </div>
            </div>
            <TaskStepsList Steps="task.Steps" OnEditStep="OnEditStep" OnDeleteStep="OnDeleteStep" />
            <button class="btn btn-success mt-2" @onclick="() => OnAddStep.InvokeAsync(task.Id)">Tilf√∏j Trin</button>
        </li>
    }
</ul>

@code {
    [Parameter] public List<ReadTaskDto> Tasks { get; set; }
    [Parameter] public EventCallback<ReadTaskDto> OnEditTask { get; set; }
    [Parameter] public EventCallback<int> OnDeleteTask { get; set; }
    [Parameter] public EventCallback<int> OnAddStep { get; set; }
    [Parameter] public EventCallback<ReadTaskStepDto> OnEditStep { get; set; }
    [Parameter] public EventCallback<int> OnDeleteStep { get; set; }

    private string FixImageUrl(string imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return "";

        if (imageUrl.Contains("azurite"))
        {
            return imageUrl.Replace("http://azurite:10000", "http://localhost:10000");
        }

        return imageUrl;
    }
}